{"ast":null,"code":"import { DECREASE, INCREASE, CLEAR_CART, REMOVE, GET_TOTALS, TOGGLE_AMOUNT } from '../action';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case DECREASE:\n      let tempCart1 = [];\n\n      if (action.payload.amount === 1) {\n        tempCart1 = state.cart.filter(cartItem => cartItem.id !== action.payload.id);\n      } else {\n        tempCart1 = state.cart.map(cartItem => {\n          if (cartItem.id === action.payload.id) {\n            cartItem = { ...cartItem,\n              amount: cartItem.amount - 1\n            };\n          }\n\n          return cartItem;\n        });\n      }\n\n      return { ...state,\n        cart: tempCart1\n      };\n\n    case INCREASE:\n      let tempCart = state.cart.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          cartItem = { ...cartItem,\n            amount: cartItem.amount + 1\n          };\n        }\n\n        return cartItem;\n      });\n      return { ...state,\n        cart: tempCart\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cart: []\n      };\n\n    case REMOVE:\n      return { ...state,\n        cart: state.cart.filter(cartItem => cartItem.id !== action.payload.id)\n      };\n\n    case GET_TOTALS:\n      let {\n        total,\n        amount\n      } = state.cart.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          amount\n        } = cartItem;\n        const itemTotal = price * amount;\n        cartTotal.total += itemTotal;\n        cartTotal.amount += amount;\n        return cartTotal;\n      }, {\n        total: 0,\n        amount: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      return { ...state,\n        total,\n        amount\n      };\n\n    case TOGGLE_AMOUNT:\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/rilex/redux-cart/src/reducers/reducer.js"],"names":["DECREASE","INCREASE","CLEAR_CART","REMOVE","GET_TOTALS","TOGGLE_AMOUNT","reducer","state","action","type","tempCart1","payload","amount","cart","filter","cartItem","id","map","tempCart","total","reduce","cartTotal","price","itemTotal","parseFloat","toFixed"],"mappings":"AAAA,SACIA,QADJ,EAEIC,QAFJ,EAGIC,UAHJ,EAIIC,MAJJ,EAKIC,UALJ,EAMIC,aANJ,QAOO,WAPP;;AASA,MAAMC,OAAO,GAAG,CAAEC,KAAF,EAASC,MAAT,KAAoB;AAChC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,QAAL;AACI,UAAIU,SAAS,GAAG,EAAhB;;AACA,UAAGF,MAAM,CAACG,OAAP,CAAeC,MAAf,KAA0B,CAA7B,EAA+B;AAC3BF,QAAAA,SAAS,GAAGH,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBR,MAAM,CAACG,OAAP,CAAeK,EAA/D,CAAZ;AACH,OAFD,MAGS;AACLN,QAAAA,SAAS,GAAGH,KAAK,CAACM,IAAN,CAAWI,GAAX,CAAgBF,QAAD,IAAc;AACrC,cAAGA,QAAQ,CAACC,EAAT,KAAgBR,MAAM,CAACG,OAAP,CAAeK,EAAlC,EAAqC;AACjCD,YAAAA,QAAQ,GAAG,EAAC,GAAGA,QAAJ;AAAcH,cAAAA,MAAM,EAAEG,QAAQ,CAACH,MAAT,GAAkB;AAAxC,aAAX;AACH;;AACD,iBAAOG,QAAP;AACH,SALW,CAAZ;AAMH;;AACD,aAAO,EAAC,GAAGR,KAAJ;AAAWM,QAAAA,IAAI,EAAEH;AAAjB,OAAP;;AACJ,SAAKT,QAAL;AACI,UAAIiB,QAAQ,GAAGX,KAAK,CAACM,IAAN,CAAWI,GAAX,CAAgBF,QAAD,IAAc;AACxC,YAAGA,QAAQ,CAACC,EAAT,KAAgBR,MAAM,CAACG,OAAP,CAAeK,EAAlC,EAAqC;AACjCD,UAAAA,QAAQ,GAAG,EAAC,GAAGA,QAAJ;AAAcH,YAAAA,MAAM,EAAEG,QAAQ,CAACH,MAAT,GAAkB;AAAxC,WAAX;AACH;;AACD,eAAOG,QAAP;AACH,OALc,CAAf;AAMA,aAAO,EAAC,GAAGR,KAAJ;AAAWM,QAAAA,IAAI,EAAEK;AAAjB,OAAP;;AACJ,SAAKhB,UAAL;AACI,aAAO,EAAC,GAAGK,KAAJ;AAAWM,QAAAA,IAAI,EAAE;AAAjB,OAAP;;AACJ,SAAKV,MAAL;AACI,aAAO,EAAC,GAAGI,KAAJ;AAAWM,QAAAA,IAAI,EAAEN,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBR,MAAM,CAACG,OAAP,CAAeK,EAA/D;AAAjB,OAAP;;AACJ,SAAKZ,UAAL;AACI,UAAI;AAAEe,QAAAA,KAAF;AAASP,QAAAA;AAAT,UAAoBL,KAAK,CAACM,IAAN,CAAWO,MAAX,CAAkB,CAACC,SAAD,EAAYN,QAAZ,KAAyB;AAC/D,cAAM;AAAEO,UAAAA,KAAF;AAASV,UAAAA;AAAT,YAAmBG,QAAzB;AACA,cAAMQ,SAAS,GAAGD,KAAK,GAAGV,MAA1B;AAEAS,QAAAA,SAAS,CAACF,KAAV,IAAmBI,SAAnB;AAEAF,QAAAA,SAAS,CAACT,MAAV,IAAoBA,MAApB;AACA,eAAOS,SAAP;AACH,OARuB,EAQtB;AACEF,QAAAA,KAAK,EAAE,CADT;AAEEP,QAAAA,MAAM,EAAE;AAFV,OARsB,CAAxB;AAYAO,MAAAA,KAAK,GAAGK,UAAU,CAACL,KAAK,CAACM,OAAN,CAAc,CAAd,CAAD,CAAlB;AACA,aAAO,EAAC,GAAGlB,KAAJ;AAAWY,QAAAA,KAAX;AAAkBP,QAAAA;AAAlB,OAAP;;AACJ,SAAKP,aAAL;AACI,aAAO,EAAC,GAAGE;AAAJ,OAAP;;AACJ;AACI,aAAOA,KAAP;AA7CR;AA+CH,CAhDD;;AAkDA,eAAeD,OAAf","sourcesContent":["import { \n    DECREASE, \n    INCREASE, \n    CLEAR_CART, \n    REMOVE, \n    GET_TOTALS,\n    TOGGLE_AMOUNT\n} from '../action'\n\nconst reducer = ( state, action) => {\n    switch(action.type){\n        case DECREASE:\n            let tempCart1 = [];\n            if(action.payload.amount === 1){\n                tempCart1 = state.cart.filter((cartItem) => cartItem.id !== action.payload.id)           \n            } \n                else {\n                tempCart1 = state.cart.map((cartItem) => {\n                    if(cartItem.id === action.payload.id){\n                        cartItem = {...cartItem, amount: cartItem.amount - 1}\n                    }\n                    return cartItem\n                })\n            }\n            return {...state, cart: tempCart1 }\n        case INCREASE:\n            let tempCart = state.cart.map((cartItem) => {\n                if(cartItem.id === action.payload.id){\n                    cartItem = {...cartItem, amount: cartItem.amount + 1}\n                }\n                return cartItem\n            })\n            return {...state, cart: tempCart}\n        case CLEAR_CART:\n            return {...state, cart: []}\n        case REMOVE:\n            return {...state, cart: state.cart.filter((cartItem) => cartItem.id !== action.payload.id)}\n        case GET_TOTALS: \n            let { total, amount } = state.cart.reduce((cartTotal, cartItem) => {\n                const { price, amount} = cartItem;\n                const itemTotal = price * amount\n\n                cartTotal.total += itemTotal\n\n                cartTotal.amount += amount;\n                return cartTotal\n            },{\n                total: 0,\n                amount: 0\n            });\n            total = parseFloat(total.toFixed(2))\n            return {...state, total, amount}\n        case TOGGLE_AMOUNT:\n            return {...state}\n        default:\n            return state\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}